/* Marvell ISP OV8858 Driver
 *
 * Copyright (C) 2009-2010 Marvell International Ltd.
 *
 * Based on mt9v011 -Micron 1/4-Inch VGA Digital Image OV8858
 *
 * Copyright (c) 2009 Mauro Carvalho Chehab (mchehab@redhat.com)
 * This code is placed under the terms of the GNU General Public License v2
 */

#ifndef	B52_OV8858_H
#define	B52_OV8858_H

#include <media/b52-sensor.h>

#define OTP_DRV_START_ADDR  0x7220
#define OTP_DRV_INFO_GROUP_COUNT  3
#define OTP_DRV_INFO_SIZE  5
#define OTP_DRV_AWB_GROUP_COUNT 3
#define OTP_DRV_AWB_SIZE  5
#define OTP_DRV_LSC_GROUP_COUNT  3
#define OTP_DRV_LSC_SIZE  62
#define OTP_DRV_LSC_REG_ADDR  0x5200
#define OTP_DRV_VCM_GROUP_COUNT  3
#define OTP_DRV_VCM_SIZE  3
#define bg_ratio_typical 0x400
#define rg_ratio_typical 0x400

/* raw10,XVCLK=24Mhz, SCLK=4x120Mhz, MIPI 640Mbps, DACCLK=240Mhz */
struct regval_tab ov8858_res_init[] = {
	{0x0103, 0x01},
	{SENSOR_MDELAY, SENSOR_MDELAY, 5},
	{0x0302, 0x1e},
	{0x0303, 0x00},
	{0x0304, 0x03},
	{0x030e, 0x00},
	{0x030f, 0x09},
	{0x0312, 0x01},
	{0x031e, 0x0c},
	{0x3600, 0x00},
	{0x3601, 0x00},
	{0x3602, 0x00},
	{0x3603, 0x00},
	{0x3604, 0x22},
	{0x3605, 0x30},
	{0x3606, 0x00},
	{0x3607, 0x20},
	{0x3608, 0x11},
	{0x3609, 0x28},
	{0x360a, 0x00},
	{0x360b, 0x06},
	{0x360c, 0xdc},
	{0x360d, 0x40},
	{0x360e, 0x0c},
	{0x360f, 0x20},
	{0x3610, 0x07},
	{0x3611, 0x20},
	{0x3612, 0x88},
	{0x3613, 0x80},
	{0x3614, 0x58},
	{0x3615, 0x00},
	{0x3616, 0x4a},
	{0x3617, 0x90},
	{0x3618, 0x56},
	{0x3619, 0x70},
	{0x361a, 0x99},
	{0x361b, 0x00},
	{0x361c, 0x07},
	{0x361d, 0x00},
	{0x361e, 0x00},
	{0x361f, 0x00},
	{0x3638, 0xff},
	{0x3633, 0x0c},
	{0x3634, 0x0c},
	{0x3635, 0x0c},
	{0x3636, 0x0c},
	{0x3645, 0x13},
	{0x3646, 0x83},
	{0x364a, 0x07},
	{0x3015, 0x01},
	{0x3018, 0x72},
	{0x3020, 0x93},
	{0x3022, 0x01},
	{0x3031, 0x0a},
	{0x3034, 0x00},
	{0x3106, 0x01},
	{0x3305, 0xf1},
	{0x3308, 0x00},
	{0x3309, 0x28},
	{0x330a, 0x00},
	{0x330b, 0x20},
	{0x330c, 0x00},
	{0x330d, 0x00},
	{0x330e, 0x00},
	{0x330f, 0x40},
	{0x3307, 0x04},
	{0x3500, 0x00},
	{0x3501, 0x4d},
	{0x3502, 0x40},
	{0x3503, 0x00},
	{0x3505, 0x80},
	{0x3508, 0x04},
	{0x3509, 0x00},
	{0x350c, 0x00},
	{0x350d, 0x80},
	{0x3510, 0x00},
	{0x3511, 0x02},
	{0x3512, 0x00},
	{0x3700, 0x18},
	{0x3701, 0x0c},
	{0x3702, 0x28},
	{0x3703, 0x19},
	{0x3704, 0x14},
	{0x3705, 0x00},
	{0x3706, 0x35},
	{0x3707, 0x04},
	{0x3708, 0x24},
	{0x3709, 0x33},
	{0x370a, 0x00},
	{0x370b, 0xb5},
	{0x370c, 0x04},
	{0x3718, 0x12},
	{0x3719, 0x31},
	{0x3712, 0x42},
	{0x3714, 0x24},
	{0x371e, 0x19},
	{0x371f, 0x40},
	{0x3720, 0x05},
	{0x3721, 0x05},
	{0x3724, 0x06},
	{0x3725, 0x01},
	{0x3726, 0x06},
	{0x3728, 0x05},
	{0x3729, 0x02},
	{0x372a, 0x03},
	{0x372b, 0x53},
	{0x372c, 0xa3},
	{0x372d, 0x53},
	{0x372e, 0x06},
	{0x372f, 0x10},
	{0x3730, 0x01},
	{0x3731, 0x06},
	{0x3732, 0x14},
	{0x3733, 0x10},
	{0x3734, 0x40},
	{0x3736, 0x20},
	{0x373a, 0x05},
	{0x373b, 0x06},
	{0x373c, 0x0a},
	{0x373e, 0x03},
	{0x3755, 0x10},
	{0x3758, 0x00},
	{0x3759, 0x4c},
	{0x375a, 0x06},
	{0x375b, 0x13},
	{0x375c, 0x20},
	{0x375d, 0x02},
	{0x375e, 0x00},
	{0x375f, 0x14},
	{0x3768, 0x22},
	{0x3769, 0x44},
	{0x376a, 0x44},
	{0x3761, 0x00},
	{0x3762, 0x00},
	{0x3763, 0x00},
	{0x3766, 0xff},
	{0x376b, 0x00},
	{0x3772, 0x23},
	{0x3773, 0x02},
	{0x3774, 0x16},
	{0x3775, 0x12},
	{0x3776, 0x04},
	{0x3777, 0x00},
	{0x3778, 0x1b},
	{0x37a0, 0x44},
	{0x37a1, 0x3d},
	{0x37a2, 0x3d},
	{0x37a3, 0x00},
	{0x37a4, 0x00},
	{0x37a5, 0x00},
	{0x37a6, 0x00},
	{0x37a7, 0x44},
	{0x37a8, 0x4c},
	{0x37a9, 0x4c},
	{0x3760, 0x00},
	{0x376f, 0x01},
	{0x37aa, 0x44},
	{0x37ab, 0x2e},
	{0x37ac, 0x2e},
	{0x37ad, 0x33},
	{0x37ae, 0x0d},
	{0x37af, 0x0d},
	{0x37b0, 0x00},
	{0x37b1, 0x00},
	{0x37b2, 0x00},
	{0x37b3, 0x42},
	{0x37b4, 0x42},
	{0x37b5, 0x33},
	{0x37b6, 0x00},
	{0x37b7, 0x00},
	{0x37b8, 0x00},
	{0x37b9, 0xff},
	{0x3800, 0x00},
	{0x3801, 0x0c},
	{0x3802, 0x00},
	{0x3803, 0x0c},
	{0x3804, 0x0c},
	{0x3805, 0xd3},
	{0x3806, 0x09},
	{0x3807, 0xa3},
	{0x3808, 0x06},
	{0x3809, 0x60},
	{0x380a, 0x04},
	{0x380b, 0xc8},
	{0x380c, 0x07},
	{0x380d, 0x88},
	{0x380e, 0x04},
	{0x380f, 0xdc},
	{0x3810, 0x00},
	{0x3811, 0x04},
	{0x3813, 0x02},
	{0x3814, 0x03},
	{0x3815, 0x01},
	{0x3820, 0x00},
	{0x3821, 0x67},
	{0x382a, 0x03},
	{0x382b, 0x01},
	{0x3830, 0x08},
	{0x3836, 0x02},
	{0x3837, 0x18},
	{0x3841, 0xff},
	{0x3846, 0x48},
	{0x3d85, 0x14},
	{0x3f08, 0x08},
	{0x3f0a, 0x80},
	{0x4000, 0xf1},
	{0x4001, 0x10},
	{0x4005, 0x10},
	{0x4002, 0x27},
	{0x4009, 0x81},
	{0x400b, 0x0c},
	{0x401b, 0x00},
	{0x401d, 0x00},
	{0x4020, 0x00},
	{0x4021, 0x04},
	{0x4022, 0x04},
	{0x4023, 0xb9},
	{0x4024, 0x05},
	{0x4025, 0x2a},
	{0x4026, 0x05},
	{0x4027, 0x2b},
	{0x4028, 0x00},
	{0x4029, 0x02},
	{0x402a, 0x04},
	{0x402b, 0x04},
	{0x402c, 0x02},
	{0x402d, 0x02},
	{0x402e, 0x08},
	{0x402f, 0x02},
	{0x401f, 0x00},
	{0x4034, 0x3f},
	{0x403d, 0x04},
	{0x4300, 0xff},
	{0x4301, 0x00},
	{0x4302, 0x0f},
	{0x4316, 0x00},
	{0x4500, 0x38},
	{0x4503, 0x18},
	{0x4600, 0x00},
	{0x4601, 0xcb},
	{0x481f, 0x32},
	{0x4837, 0x16},
	{0x4850, 0x10},
	{0x4851, 0x32},
	{0x4b00, 0x2a},
	{0x4b0d, 0x00},
	{0x4d00, 0x04},
	{0x4d01, 0x18},
	{0x4d02, 0xc3},
	{0x4d03, 0xff},
	{0x4d04, 0xff},
	{0x4d05, 0xff},
	{0x5000, 0x7e},
	{0x5001, 0x01},
	{0x5002, 0x08},
	{0x5003, 0x20},
	{0x5046, 0x12},
	{0x5780, 0xfc},
	{0x5784, 0x0c},
	{0x5787, 0x40},
	{0x5788, 0x08},
	{0x578a, 0x02},
	{0x578b, 0x01},
	{0x578c, 0x01},
	{0x578e, 0x02},
	{0x578f, 0x01},
	{0x5790, 0x01},
	{0x5901, 0x00},
	{0x5b00, 0x02},
	{0x5b01, 0x10},
	{0x5b02, 0x03},
	{0x5b03, 0xcf},
	{0x5b05, 0x6c},
	{0x5e00, 0x00},
	{0x5e01, 0x41},
	{0x382d, 0x7f},
	{0x4825, 0x3a},
	{0x4826, 0x40},
	{0x4808, 0x25},
/*Raw 10bit 3264*2448 30fps 4lane 720M bps/lane*/
	{0x030f, 0x04},
	{0x3501, 0x9a},
	{0x3502, 0x20},
	{0x3508, 0x02},
	{0x3700, 0x30},
	{0x3701, 0x18},
	{0x3702, 0x50},
	{0x3703, 0x32},
	{0x3704, 0x28},
	{0x3706, 0x6a},
	{0x3707, 0x08},
	{0x3708, 0x48},
	{0x3709, 0x66},
	{0x370a, 0x01},
	{0x370b, 0x6a},
	{0x370c, 0x07},
	{0x3718, 0x14},
	{0x3712, 0x44},
	{0x371e, 0x31},
	{0x371f, 0x7f},
	{0x3720, 0x0a},
	{0x3721, 0x0a},
	{0x3724, 0x0c},
	{0x3725, 0x02},
	{0x3726, 0x0c},
	{0x3728, 0x0a},
	{0x3729, 0x03},
	{0x372a, 0x06},
	{0x372b, 0xa6},
	{0x372c, 0xa6},
	{0x372d, 0xa6},
	{0x372e, 0x0c},
	{0x372f, 0x20},
	{0x3730, 0x02},
	{0x3731, 0x0c},
	{0x3732, 0x28},
	{0x3736, 0x30},
	{0x373a, 0x0a},
	{0x373b, 0x0b},
	{0x373c, 0x14},
	{0x373e, 0x06},
	{0x375a, 0x0c},
	{0x375b, 0x26},
	{0x375d, 0x04},
	{0x375f, 0x28},
	{0x3772, 0x46},
	{0x3773, 0x04},
	{0x3774, 0x2c},
	{0x3775, 0x13},
	{0x3776, 0x08},
	{0x3778, 0x16},
	{0x37a0, 0x88},
	{0x37a1, 0x7a},
	{0x37a2, 0x7a},
	{0x37a7, 0x88},
	{0x37a8, 0x98},
	{0x37a9, 0x98},
	{0x37aa, 0x88},
	{0x37ab, 0x5c},
	{0x37ac, 0x5c},
	{0x37ad, 0x55},
	{0x37ae, 0x19},
	{0x37af, 0x19},
	{0x37b3, 0x84},
	{0x37b4, 0x84},
	{0x37b5, 0x66},
	{0x3808, 0x0c},
	{0x3809, 0xc0},
	{0x380a, 0x09},
	{0x380b, 0x90},
	{0x380c, 0x07},
	{0x380d, 0x94},
	{0x380e, 0x09},
	{0x380f, 0xaa},
	{0x3814, 0x01},
	{0x3821, 0x46},
	{0x382a, 0x01},
	{0x3830, 0x06},
	{0x3836, 0x01},
	{0x3f08, 0x08},
	{0x3f0a, 0x00},
	{0x4001, 0x00},
	{0x4022, 0x0b},
	{0x4023, 0xc3},
	{0x4024, 0x0c},
	{0x4025, 0x36},
	{0x4026, 0x0c},
	{0x4027, 0x37},
	{0x402b, 0x08},
	{0x402e, 0x0c},
	{0x4500, 0x58},
	{0x4600, 0x01},
	{0x4601, 0x97},
	{0x382d, 0xff},
	{0x0100, 0x01},
};
struct regval_tab ov8858_fmt_raw10[] = {
};

struct regval_tab ov8858_res_2M[] = {
/*Raw 10bit 1632x1224 30fps 4lane 720M bps/lane*/
	{0x0100, 0x00},
	{0x030f, 0x09},
	{0x3501, 0x4d},
	{0x3502, 0x40},
	{0x3508, 0x04},
	{0x3700, 0x18},
	{0x3701, 0x0c},
	{0x3702, 0x28},
	{0x3703, 0x19},
	{0x3704, 0x14},
	{0x3706, 0x35},
	{0x3707, 0x04},
	{0x3708, 0x24},
	{0x3709, 0x33},
	{0x370a, 0x00},
	{0x370b, 0xb5},
	{0x370c, 0x04},
	{0x3718, 0x12},
	{0x3712, 0x42},
	{0x371e, 0x19},
	{0x371f, 0x40},
	{0x3720, 0x05},
	{0x3721, 0x05},
	{0x3724, 0x06},
	{0x3725, 0x01},
	{0x3726, 0x06},
	{0x3728, 0x05},
	{0x3729, 0x02},
	{0x372a, 0x03},
	{0x372b, 0x53},
	{0x372c, 0xa3},
	{0x372d, 0x53},
	{0x372e, 0x06},
	{0x372f, 0x10},
	{0x3730, 0x01},
	{0x3731, 0x06},
	{0x3732, 0x14},
	{0x3736, 0x20},
	{0x373a, 0x05},
	{0x373b, 0x06},
	{0x373c, 0x0a},
	{0x373e, 0x03},
	{0x375a, 0x06},
	{0x375b, 0x13},
	{0x375d, 0x02},
	{0x375f, 0x14},
	{0x3772, 0x23},
	{0x3773, 0x02},
	{0x3774, 0x16},
	{0x3775, 0x12},
	{0x3776, 0x04},
	{0x3778, 0x1b},
	{0x37a0, 0x44},
	{0x37a1, 0x3d},
	{0x37a2, 0x3d},
	{0x37a7, 0x44},
	{0x37a8, 0x4c},
	{0x37a9, 0x4c},
	{0x37aa, 0x44},
	{0x37ab, 0x2e},
	{0x37ac, 0x2e},
	{0x37ad, 0x33},
	{0x37ae, 0x0d},
	{0x37af, 0x0d},
	{0x37b3, 0x42},
	{0x37b4, 0x42},
	{0x37b5, 0x33},
	{0x3808, 0x06},
	{0x3809, 0x60},
	{0x380a, 0x04},
	{0x380b, 0xc8},
	{0x380c, 0x07},
	{0x380d, 0x88},
	{0x380e, 0x04},
	{0x380f, 0xdc},
	{0x3814, 0x03},
	{0x3821, 0x67},
	{0x382a, 0x03},
	{0x3830, 0x08},
	{0x3836, 0x02},
	{0x3f08, 0x08},
	{0x3f0a, 0x80},
	{0x4001, 0x10},
	{0x4022, 0x04},
	{0x4023, 0xb9},
	{0x4024, 0x05},
	{0x4025, 0x2a},
	{0x4026, 0x05},
	{0x4027, 0x2b},
	{0x402b, 0x04},
	{0x402e, 0x08},
	{0x4500, 0x38},
	{0x4600, 0x00},
	{0x4601, 0xcb},
	{0x382d, 0x7f},
	{0x0100, 0x01},
};
struct regval_tab ov8858_res_8M[] = {
/*Raw 10bit 3264*2448 30fps 4lane 720M bps/lane*/
	{0x0100, 0x00},
	{0x030f, 0x04},
	{0x3501, 0x9a},
	{0x3502, 0x20},
	{0x3508, 0x02},
	{0x3700, 0x30},
	{0x3701, 0x18},
	{0x3702, 0x50},
	{0x3703, 0x32},
	{0x3704, 0x28},
	{0x3706, 0x6a},
	{0x3707, 0x08},
	{0x3708, 0x48},
	{0x3709, 0x66},
	{0x370a, 0x01},
	{0x370b, 0x6a},
	{0x370c, 0x07},
	{0x3718, 0x14},
	{0x3712, 0x44},
	{0x371e, 0x31},
	{0x371f, 0x7f},
	{0x3720, 0x0a},
	{0x3721, 0x0a},
	{0x3724, 0x0c},
	{0x3725, 0x02},
	{0x3726, 0x0c},
	{0x3728, 0x0a},
	{0x3729, 0x03},
	{0x372a, 0x06},
	{0x372b, 0xa6},
	{0x372c, 0xa6},
	{0x372d, 0xa6},
	{0x372e, 0x0c},
	{0x372f, 0x20},
	{0x3730, 0x02},
	{0x3731, 0x0c},
	{0x3732, 0x28},
	{0x3736, 0x30},
	{0x373a, 0x0a},
	{0x373b, 0x0b},
	{0x373c, 0x14},
	{0x373e, 0x06},
	{0x375a, 0x0c},
	{0x375b, 0x26},
	{0x375d, 0x04},
	{0x375f, 0x28},
	{0x3772, 0x46},
	{0x3773, 0x04},
	{0x3774, 0x2c},
	{0x3775, 0x13},
	{0x3776, 0x08},
	{0x3778, 0x16},
	{0x37a0, 0x88},
	{0x37a1, 0x7a},
	{0x37a2, 0x7a},
	{0x37a7, 0x88},
	{0x37a8, 0x98},
	{0x37a9, 0x98},
	{0x37aa, 0x88},
	{0x37ab, 0x5c},
	{0x37ac, 0x5c},
	{0x37ad, 0x55},
	{0x37ae, 0x19},
	{0x37af, 0x19},
	{0x37b3, 0x84},
	{0x37b4, 0x84},
	{0x37b5, 0x66},
	{0x3808, 0x0c},
	{0x3809, 0xc0},
	{0x380a, 0x09},
	{0x380b, 0x90},
	{0x380c, 0x07},
	{0x380d, 0x94},
	{0x380e, 0x09},
	{0x380f, 0xaa},
	{0x3814, 0x01},
	{0x3821, 0x46},
	{0x382a, 0x01},
	{0x3830, 0x06},
	{0x3836, 0x01},
	{0x3f08, 0x08},
	{0x3f0a, 0x00},
	{0x4001, 0x00},
	{0x4022, 0x0b},
	{0x4023, 0xc3},
	{0x4024, 0x0c},
	{0x4025, 0x36},
	{0x4026, 0x0c},
	{0x4027, 0x37},
	{0x402b, 0x08},
	{0x402e, 0x0c},
	{0x4500, 0x58},
	{0x4600, 0x01},
	{0x4601, 0x97},
	{0x382d, 0xff},
	{0x0100, 0x01},
};
struct regval_tab ov8858_id[] = {
	{0x300b, 0x88, 0xff},
	{0x300c, 0x58, 0xff},
};
struct regval_tab ov8858_vts[] = {
	{0x380e, 0x0d, 0x7f},
	{0x380f, 0x60, 0xff},
};
struct regval_tab ov8858_stream_on[] = {
	{0x0100, 0x01, 0xff},
};
struct regval_tab ov8858_stream_off[] = {
	{0x0100, 0x00, 0xff},
};
struct regval_tab ov8858_expo[] = {
	{0x3500, 0xff, 0xff},
	{0x3501, 0x10, 0xff},
	{0x3502, 0x10, 0x0f},
};
struct regval_tab ov8858_ag[] = {
	{0x3508, 0x00, 0xff},
	{0x3509, 0x00, 0xff},
};
struct regval_tab ov8858_af[] = {
	{0x3618, 0x00, 0xff},
	{0x3619, 0x00, 0xff},
};
struct regval_tab ov8858_vflip[] = {
	{0x3620, 0x00, 0x4},
};
struct regval_tab ov8858_hflip[] = {
	{0x3621, 0x00, 0x4},
};
struct b52_sensor_i2c_attr ov8858_i2c_attr[] = {
	[0] = {
		.reg_len = I2C_16BIT,
		.val_len = I2C_8BIT,
		.addr = 0x36,
		},
};
#define N_OV8858_I2C_ATTR ARRAY_SIZE(ov8858_i2c_attr)
#define N_OV8858_INIT ARRAY_SIZE(ov8858_res_init)
#define N_OV8858_ID ARRAY_SIZE(ov8858_id)
#define N_OV8858_FMT_RAW10 ARRAY_SIZE(ov8858_fmt_raw10)
#define N_OV8858_2M ARRAY_SIZE(ov8858_res_2M)
#define N_OV8858_8M ARRAY_SIZE(ov8858_res_8M)
#define N_OV8858_VTS ARRAY_SIZE(ov8858_vts)
#define N_OV8858_EXPO ARRAY_SIZE(ov8858_expo)
#define N_OV8858_AG ARRAY_SIZE(ov8858_ag)
#define N_OV8858_AF ARRAY_SIZE(ov8858_af)
#define N_OV8858_VFLIP ARRAY_SIZE(ov8858_vflip)
#define N_OV8858_HFLIP ARRAY_SIZE(ov8858_hflip)
#define N_OV8858_STREAM_ON ARRAY_SIZE(ov8858_stream_on)
#define N_OV8858_STREAM_OFF ARRAY_SIZE(ov8858_stream_off)
struct b52_sensor_mbus_fmt ov8858_fmt = {
	.mbus_code	= V4L2_MBUS_FMT_SBGGR8_1X8,
	.colorspace	= V4L2_COLORSPACE_SRGB,
	.regs = {
		.tab = ov8858_fmt_raw10,
		.num = N_OV8858_FMT_RAW10,
	}
};
struct b52_sensor_resolution ov8858_res[] = {
	[0] = {
		 .width = 3264,
		 .height = 2448,
		 .hts = 0x1580,
		 .min_vts = 0x09aa,
		 .prop = SENSOR_RES_BINING1,
		 .regs = {
			.tab = ov8858_res_8M,
			.num = N_OV8858_8M,
		},
	},
	[1] = {
		 .width = 1632,
		 .height = 1224,
		 .hts = 0x1580,
		 .min_vts = 0x04dc,
		 .prop = SENSOR_RES_BINING2,
		 .regs = {
			.tab = ov8858_res_2M,
			.num = N_OV8858_2M,
		},
	},
};
static struct b52_sensor_i2c_attr vcm_attr = {
	.reg_len = I2C_16BIT,
	.val_len = I2C_8BIT,
	.addr = 0x0c,
};
static struct b52_sensor_vcm vcm_dw9718 = {
	.type = DW9718,
	.attr = &vcm_attr,
};
static struct b52_sensor_module ov8858_SUNNY = {
	.vcm = &vcm_dw9718,
	.id = 0,
};
static int OV8858_get_pixelclock(struct v4l2_subdev *sd, u32 *rate, u32 mclk);
static int OV8858_get_dphy_desc(struct v4l2_subdev *sd,
			struct csi_dphy_desc *dphy_desc, u32 mclk);
static int OV8858_update_otp(struct v4l2_subdev *sd,
				struct b52_sensor_otp *opt);

struct b52_sensor_spec_ops ov8858_ops = {
	.get_pixel_rate = OV8858_get_pixelclock,
	.get_dphy_desc = OV8858_get_dphy_desc,
	.update_otp = OV8858_update_otp,
	.s_power = NULL,
};
struct b52_sensor_data b52_ov8858 = {
	.name = "ovt.ov8858",
	.type = OVT_SENSOR,
	.i2c_attr = ov8858_i2c_attr,
	.num_i2c_attr = N_OV8858_I2C_ATTR,
	.id = {
		.tab = ov8858_id,
		.num = N_OV8858_ID,
	},
	.global_setting = {
		.tab = ov8858_res_init,
		.num = N_OV8858_INIT,
	},
	.mbus_fmt = &ov8858_fmt,
	.num_mbus_fmt = 1,
	.res = ov8858_res,
	.num_res = 2,
	.streamon = {
		.tab = ov8858_stream_on,
		.num = N_OV8858_STREAM_ON,
	},
	.streamoff = {
		.tab = ov8858_stream_off,
		.num = N_OV8858_STREAM_OFF,
	},
	.vts_range = {0X0ba0, 0x7fff},
	.gain_range = {
		[B52_SENSOR_AG] = {0x0010, 0x00ff},
		[B52_SENSOR_DG] = {0x0010, 0x0010},
	},
	.expo_range = {0x00010, 0xb90},
	.focus_range = {0x0010, 0x03ff},
	.vts_reg = {
		.tab = ov8858_vts,
		.num = N_OV8858_VTS,
	},
	.expo_reg = {
		.tab = ov8858_expo,
		.num = N_OV8858_EXPO,
	},
	.gain_reg = {
		[B52_SENSOR_AG] = {
			.tab = ov8858_ag,
			.num = N_OV8858_AG,
		},
		[B52_SENSOR_DG] = {
			.tab = NULL,
			.num = 0,
		},
	},
	.af_reg = {
		.tab = ov8858_af,
		.num = N_OV8858_AF,
	},
	.hflip = {
		.tab = ov8858_hflip,
		.num = N_OV8858_HFLIP,
	},
	.vflip = {
		.tab = ov8858_vflip,
		.num = N_OV8858_VFLIP,
	},
	.gain_shift = 0,
	.nr_lane = 4,
	.mipi_clk_bps = 621000000,
	.ops = &ov8858_ops,
	.module = &ov8858_SUNNY,
	.num_module =  1,
};

#endif
